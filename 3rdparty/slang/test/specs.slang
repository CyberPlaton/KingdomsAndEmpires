//------------------------------------------------------------------------------------------------------------------------
//- Rules
//------------------------------------------------------------------------------------------------------------------------
program		-> declaration* EOF;

//------------------------------------------------------------------------------------------------------------------------
declaration -> declaration_class
			| declaration_function
			| declaration_variable
			| statement
			;

//------------------------------------------------------------------------------------------------------------------------
declaration_class -> "class" IDENTIFIER ("<" IDENTIFIER)?
					"{" function* "}"
					;

//------------------------------------------------------------------------------------------------------------------------
declaration_function -> "def" function;

//------------------------------------------------------------------------------------------------------------------------
declaration_variable -> "var" IDENTIFIER ("=" expression)? ";";

//------------------------------------------------------------------------------------------------------------------------
//- Statements
//------------------------------------------------------------------------------------------------------------------------
statement -> statement_expression
			| statement_for
			| statement_if
			| statement_print
			| statement_return
			| statement_while
			| block
			;

//------------------------------------------------------------------------------------------------------------------------
statement_expression -> expression ";";

//------------------------------------------------------------------------------------------------------------------------
statement_for -> "for" "(" (declaration_variable | statement_expression | ";")
						expression? ";"
						expression? ")" statement
						;

//------------------------------------------------------------------------------------------------------------------------
statement_if -> "if" "(" expression ")" statement
				("else" statement)?
				;

//------------------------------------------------------------------------------------------------------------------------
statement_print -> "print" expression ";";

//------------------------------------------------------------------------------------------------------------------------
statement_return -> "return" expression? ";";

//------------------------------------------------------------------------------------------------------------------------
statement_while -> "while" "(" expression ")" statement;

//------------------------------------------------------------------------------------------------------------------------
block -> "{" declaration* "}";

//------------------------------------------------------------------------------------------------------------------------
//- Expressions
//------------------------------------------------------------------------------------------------------------------------
expression -> assignment;

//------------------------------------------------------------------------------------------------------------------------
assignment -> (call ".")? IDENTIFIER "=" assignment
			| logical_or
			;

//------------------------------------------------------------------------------------------------------------------------
logical_or -> logical_and ("or" logical_and)*;

//------------------------------------------------------------------------------------------------------------------------
logical_and -> equality ("and" equality)*;

//------------------------------------------------------------------------------------------------------------------------
equality -> comparison (("!=" | "==") comparison)*;

//------------------------------------------------------------------------------------------------------------------------
comparison -> term ((">" | ">=" | "<" | "<=") term)*;

//------------------------------------------------------------------------------------------------------------------------
term -> factor (("+" | "-") factor)*;

//------------------------------------------------------------------------------------------------------------------------
factor -> unary (("/" | "*") unary)*;

//------------------------------------------------------------------------------------------------------------------------
unary -> ("!" | "-") unary | call;

//------------------------------------------------------------------------------------------------------------------------
call -> primary ("(" arguments? ")" | "." IDENTIFIER)*;

//------------------------------------------------------------------------------------------------------------------------
primary -> "true" | "false" | "null" | "this"
		| NUMBER | STRING | IDENTIFIER | "(" expression ")"
		| "super" "." IDENTIFIER
		;

//------------------------------------------------------------------------------------------------------------------------
//- Utility
//------------------------------------------------------------------------------------------------------------------------
function -> IDENTIFIER "(" parameters? ")" block;

//------------------------------------------------------------------------------------------------------------------------
parameters -> IDENTIFIER ("," IDENTIFIER)*;

//------------------------------------------------------------------------------------------------------------------------
arguments -> expression ("," expression)*;

//------------------------------------------------------------------------------------------------------------------------
//- Lexical Grammar
//------------------------------------------------------------------------------------------------------------------------
NUMBER -> DIGIT+ ("." DIGIT+)?;

//------------------------------------------------------------------------------------------------------------------------
STRING -> "\"" <any characters except escape characters>* "\"";

//------------------------------------------------------------------------------------------------------------------------
IDENTIFIER -> ALPHA (ALPHA | DIGIT)*;

//------------------------------------------------------------------------------------------------------------------------
ALPHA -> "a" ... "z" | "A" ... "Z" | "_";

//------------------------------------------------------------------------------------------------------------------------
DIGIT -> "0" ... "9";
